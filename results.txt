Data: two batches of about 2500 each
20 iterations (of each batch)
-----------------------------------------------------
1.
net:add(nn.TemporalConvolution(64, 128, 5))
net:add(nn.TemporalMaxPooling(5))
net:add(nn.TemporalConvolution(128, 256, 5))
net:add(nn.TemporalMaxPooling(5))
net:add(nn.View(256))
net:add(nn.Linear(256, 120))
net:add(nn.Linear(120, 84))
net:add(nn.Linear(84, 10))
net:add(nn.LogSoftMax())

Results: 4624 correct out of 4684 : 98.719043552519%

2.
net:add(nn.TemporalConvolution(64, 256, 5))
net:add(nn.TemporalMaxPooling(5))
net:add(nn.TemporalConvolution(256, 512, 5))
net:add(nn.TemporalMaxPooling(5))
net:add(nn.View(512))
net:add(nn.Linear(512, 120))
net:add(nn.Linear(120, 84))
net:add(nn.Linear(84, 10))
net:add(nn.LogSoftMax())

Results: 1st run: 4643 correct out of 4684 = 99.124679760888%
2nd: 4641 correct out of 4684 = 99.081981212639%

confusion matrix (2nd run):
X axis: Predicted Values
Y axis: Actual Values
   0    0    1    2    3    4    5    6    7    8    9
   0   85    0    2    0    0    0    0    0    0    0
   1    0  168    0    0    3    0    0    0    1    2
   2    0    0   57    0    0    0    0    0    0    0
   3    0    2    1  129    0    0    0    0    0    0
   4    0    3    0    0  174    0    0    0    0    0
   5    2    2    0    0    0    6    0    0    1    2
   6    0    0    0    0    0    1   84   17    0    0
   7    3    0    0    1    0    0    0  164    0    0
   8    0    0    0    0    0    0    0    0  164    0
   9    0    0    0    0    0    0    0    0    0   26

3.
same net as above^^
trained data on first half of dataset, tested on second half

Results: 2046 correct out of 2184 = 93.681318681319%

Confusion Matrix:
X axis: Predicted Values
Y axis: Actual Values
   0    0    1    2    3    4    5    6    7    8    9
   0    8    0    2    3    2    1    0   14    2    0
   1    0   42    3    7    1    5    0    0    1   17
   2    0    0  115    0    0    0    0    0    0    0
   3    0    0    2  135    0    0    0    0    0    0
   4    0    2    0   12  174    1    0    0    0    1
   5    0    2    0   21    1  162    0    1    0    0
   6    0    0    0    0    0    0  238    7    0    0
   7    3    0    3    4    0    0    3   83    0    0
   8    0    0    0    0    0    0    0    0  138    9
   9    0    1    0    2    0    3    0    0    2  183

**Note: tried this same data with the first nn design, only got 90.65% accuracy,
so wider is definitely better

4.
changed only:
net:add(nn.Linear(512, 300))
net:add(nn.Linear(300, 84))

2052 correct out of 2184 = 93.956043956044% A little better!

X axis: Predicted Values
Y axis: Actual Values
   0    0    1    2    3    4    5    6    7    8    9
   0   10    1    4    0    1    0    0   11    1    0
   1    0   50    1    1    0    4    0    3    0   24
   2    0    2   98    0    0    1    0    1    0    1
   3    0    0    1  146    0    4    0    0    0    2
   4    0    7    0    0  142    3    0    0    0    0
   5    0    0    2    3    3  196    0    0    0    0
   6    0    0    0    0    0    0   21    7    0    0
   7    0    0    0    1    0    1    8   90    0    0
   8    0    0    0    0    0    0    4    0  130    6
   9    0    8    0    2    0    2    1    1   10  145
